{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","../src/js/main.js","../src/js/ItemStore.js","../src/js/riotcontrol.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var ItemStore = require('ItemStore');\nvar RiotControl = require('riotcontrol');\n\nvar itemStore = new ItemStore();\n\nRiotControl.addStore(itemStore);\n\nriot.mount('item-app'); // Kickoff the Riot app.\n\n// Riot router\nriot.route(function(page,id) {\n\tif (page == 'add'){\n\t\tRiotControl.trigger('route_item_add');\n\t}\n\telse {\n\t\tRiotControl.trigger('route_item', id);\n\t}\n});","// Manages our item data locally, for now.\nfunction ItemStore() {  \n  riot.observable(this)\n\n  var self = this\n\n  // Could pull this from a server API.\n  self.items = [\n    { id: 1, title: 'Foobar' },\n    { id: 2, title: 'Foobaz' },\n    { id: 3, title: 'Barbar' }\n  ]\n\n  // Init our list view.\n  self.on('item_list_init', function() {\n    self.trigger('item_list_changed', self.items)\n  })\n\n  // Search our item collection.\n  self.on('item_list_search', function(txt) {\n    var list = self.items\n    if (txt.length > 0)\n      list = self.items.filter(function(el) {\n        if (el.title.toLowerCase().search(new RegExp(txt.toLowerCase())) == -1)\n          return false\n        else\n          return true\n      })\n\n    self.trigger('item_list_changed', list)\n  })\n\n  // Add to our item collection.\n  // Could push this to a server API.\n  self.on('item_detail_add', function(title) {\n    self.items.push({ id: self.items.length+1, title: title })\n    self.trigger('item_list_changed', self.items)\n  })\n\n  // Pull item for URL route. (id)\n  self.on('route_item', function(id) {      \n    var item = null\n    self.items.forEach(function(el) {\n      if (el.id == id)\n        item = el\n    })\n    self.trigger('item_detail_changed', item)\n  })\n\n  // Emit event for add item route.\n  self.on('route_item_add', function() {\n    self.trigger('item_detail_create')\n  })\n\n}","// https://github.com/jimsparkman/RiotControl\nvar _RiotControlApi = ['on','one','off','trigger']\nvar RiotControl = {\n  _stores: [],\n  addStore: function(store) {\n    this._stores.push(store)\n  }\n}\n_RiotControlApi.forEach(function(api){\n\tRiotControl[api] = function() {\n\t\tvar args = [].slice.call(arguments)\n\t\tthis._stores.forEach(function(el){\n\t      el[api].apply(null, args)\n\t    })\n\t}\n})\n"]}